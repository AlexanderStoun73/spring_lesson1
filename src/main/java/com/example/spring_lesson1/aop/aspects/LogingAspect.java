package com.example.spring_lesson1.aop.aspects;

import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;

@Component
@Aspect
public class LogingAspect {
    //@Before("execution(public void com.example.spring_lesson1.aop.Library.getBook())") // это место point cut (срез) выражение, где должен быть применен advice
                                                // Spring AOP использует AspectJ PointCut expression language. (Определенные
                                                // правила в написании выражений для создания PointCut)
    @Pointcut("execution(public * get*(..))")
    private void allGetMethods(){}

    @Before("allGetMethods()")
    public void beforeGetBookAdvice() {
        System.out.println("beforeGetBookAdvice: попытка получить книгу");
    }

    @Before("execution(public *  returnBook())")
    public void beforeReturnBookAdvice() {
        System.out.println("beforeReturnBookAdvice: попытка вернуть книгу");
    }
}


/*
В аспектно-ориентированном программировании (АОП) совет (advice) представляет собой блок кода,
который определяет действие, выполняемое в определенной точке выполнения программы, когда срабатывает аспект.

Советы являются основными строительными блоками АОП и предоставляют возможность внедрять поведение аспекта в целевой код.
Когда совет применяется к определенной точке в программе, он выполняет определенные действия в зависимости
от типа совета и контекста выполнения. Некоторые из основных типов советов в АОП включают следующее:

Before advice (совет перед): Этот тип совета выполняет действие перед вызовом метода или событием.
    Например, он может использоваться для выполнения предварительных проверок или подготовки данных перед выполнением метода.

After returning advice (совет после возврата): Этот совет выполняет действие после успешного возврата из метода.
    Он может использоваться для обработки результатов выполнения метода или выполнения дополнительных действий после успешного завершения метода.

After throwing advice (совет после выброса исключения): Этот тип совета выполняет действие после выброса исключения в методе.
    Он может использоваться для обработки исключений, регистрации ошибок или выполнения дополнительных действий после возникновения исключения.

After advice (совет после): Этот совет выполняет действие после вызова метода, независимо от того, успешно ли он
    выполнен или выбросил исключение. Он может использоваться для очистки ресурсов, фиксации изменений или выполнения
        других действий, которые должны быть выполнены независимо от результата.

Around advice (совет вокруг): Этот тип совета обертывает вызов метода и полностью контролирует его выполнение.
    Он позволяет изменять входные параметры, результаты и управление выполнением метода. Совет вокруг может быть
        использован для реализации дополнительной логики до и после вызова метода, а также для изменения поведения метода.

Советы позволяют внедрять поперечные аспекты в основной код приложения, добавлять дополнительную функциональность
и контролировать поведение методов. Они являются одной из ключевых составляющих АОП и позволяют реализовывать
множество практических сценариев, таких как логгирование, проверка безопасности, управление транзакциями и другие.
 */